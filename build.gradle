buildscript {
    ext {
        min_sdk_version = 23
        target_sdk_version = 31
        build_tools_version = '30.0.3'
        nav_version = '2.3.2'
        kotlin_version = '1.6.10'
        activity_ktx_version = '1.2.4'
        androidx_core_ktx_version = '1.3.2'
        annotation_version = '1.1.0-rc01'
        app_compat_version = '1.3.1'
        commons_collections4_version = '4.4'
        commons_io_version = '1.3.2'
        commons_lang_version = '3.9'
        compose_version = '1.1.1'
        compose_material3_version = '1.0.0-alpha09'
        compose_test_version = '1.0.4'
        CORE_VERSION = '1.6.0-rc01'
        espresso_core_version = '3.3.0'
        exo_player_vesrion = '2.15.1'
        hilt_version = '2.40.1'
        jacoco_version = '0.8.7'
        junit_ext_version = '1.1.2'
        JUNIT4_VERSION = '4.12'
        lifecycle_version = '2.4.0'
        coroutines_version = '1.4.2'
        media_version = '1.6.0'
        monitor_version = '1.4.0-beta01'
        mockito_inline_version = '3.7.7'
        mockito_kotlin_version = '3.2.0'
        robolectric_version = '4.6.1'
        room_version = '2.2.3'
        test_core_version = '1.4.0-beta01'
        test_orchestrator_version = '1.3.0'
        test_rules_version = '1.3.0'
        test_runner_version = '1.3.0'
        ui_automator_version= '2.2.0'

        EXCLUDE_LIST =  [
                '**/dagger/**',
                '**_Factory**',
                '**_MembersInjector**',
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*',
                '**/*$[0-9].*'
        ]

        junitUnitTests =  [
            "junit:junit:$JUNIT4_VERSION",
            "org.mockito.kotlin:mockito-kotlin:${mockito_kotlin_version}",
            "androidx.core:core-ktx:$androidx_core_ktx_version"
        ]

        // flavour dimensions
        flavor_dimen_mode = "mode"

        // flavours
        flavor_full = "full"
        flavor_unitTest = "unitTest"
        flavor_integration = "integration"
        flavor_endToEnd = "endToEnd"
        flavor_automation = "automation"
    }

    repositories {
        google()
        mavenCentral()

    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.google.dagger:hilt-android-gradle-plugin:$hilt_version"
        def nav_version = '2.4.1'
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
    }
}

plugins {
    id "org.sonarqube" version "3.0"
}

sonarqube {
    properties {
        property "sonar.projectKey", "goldy1992_Mp3Player"
        property "sonar.organization", "goldy1992-github"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.exclusions", "**Test**,**IAudioService.java,**dagger**,**Injector**,**LoggingUtils.*,**android**,**/res/**,**/databinding/**,**hilt_aggregated_deps**,**/Hilt_**"
        property "sonar.coverage.inclusions", "**/main/**"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }


}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task preSonarQube() {
    def reportName = "jacocoUnitTestReport"

    if (project.gradle.startParameter.taskNames.join(",").contains("jacocoCombinedUnitTestAndroidTestReport")) {
        reportName = "jacocoCombinedUnitTestAndroidTestReport"
    }

    rootProject.ext.set("jacaco_report_name", reportName)
}

tasks['sonarqube'].configure {
    mustRunAfter tasks['preSonarQube']
}
