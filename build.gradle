buildscript {
    ext {
        PIE = 28
        MARSHMALLOW = 23
        MIN_SDK_VERSION = 23
        TARGET_SDK_VERION = 29
        BUILD_TOOLS_VERSION = '29.0.2'
        nav_version = '2.3.2'
        kotlin_version = '1.4.32'
        ACTIVITY_VERSION = '1.1.0'
        ANDROIDX_CORE_KOTLIN_VERSION = '1.3.2'
        ANNOTATION_VERSION = '1.1.0-rc01'
        APP_COMPAT_VERSION = '1.2.0'
        COMMONS_COLLECTIONS4_VERSION = '4.4'
        COMMONS_IO_VERSION = '1.3.2'
        COMMONS_LANG_VERSION = '3.9'
        CORE_VERSION = '1.0.1'
        ESPRESSO_CORE_VERSION = '3.3.0'
        EXO_PLAYER_VERSION = '2.13.3'
        GOOGLE_GUAVA_VERSION = '27.1-android'
        HILT_VERSION = '2.36'
        JACOCO_VERSION = '0.8.5'
        JUNIT_EXT_VERSION = '1.1.2'
        JUNIT4_VERSION = '4.12'
        lifecycleVersion = '2.3.1'
        KOTLIN_COROUTINE_VERSION = '1.3.2'
        MATERIAL_VERSION = '1.3.0-alpha02'
        MEDIA_VERSION = '1.3.1'
        MIRROR_VERSION = '1.3.0'
        mockito_inline_version = '3.7.7'
        MOCKITO_VERSION = '3.6.0'
        MOCKITO_KOTLIN = '2.2.0'
        ROBOLECTRIC_VERSION = '4.5'
        ROOM_VERSION = '2.2.3'
        TEST_CORE_VERSION = '1.3.0'
        test_orchestrator_version = '1.3.0'
        TEST_RULES_VERSION = '1.3.0'
        TEST_RUNNER_VERSION = '1.3.0'
        TEST_UI_AUTOMATOR_VERSION= '2.2.0'

        EXCLUDE_LIST =  [
                '**/dagger/**',
                '**_Factory**',
                '**_MembersInjector**',
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*',
                '**/*$[0-9].*'
        ]

        junitUnitTests =  [
            "junit:junit:$JUNIT4_VERSION",
            "com.nhaarman.mockitokotlin2:mockito-kotlin:$MOCKITO_KOTLIN",
            "androidx.core:core-ktx:$ANDROIDX_CORE_KOTLIN_VERSION"
        ]

        // flavour dimensions
        flavor_dimen_mode = "mode"

        // flavours
        flavor_full = "full"
        flavor_unitTest = "unitTest"
        flavor_integration = "integration"
        flavor_endToEnd = "endToEnd"
        flavor_automation = "automation"
    }

    repositories {
   //     mavenCentral()
        google()
        mavenCentral()

    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.0-alpha01'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.google.dagger:hilt-android-gradle-plugin:$HILT_VERSION"
        def nav_version = "2.3.0"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
    }
}

plugins {
    id "org.sonarqube" version "3.0"
}

sonarqube {
    properties {
        property "sonar.projectKey", "goldy1992_Mp3Player"
        property "sonar.organization", "goldy1992-github"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.exclusions", "**Test**,**IAudioService.java,**dagger**,**Injector**,**LoggingUtils.*,**android**,**/res/**,**/databinding/**,**hilt_aggregated_deps**,**/Hilt_**"
        property "sonar.coverage.inclusions", "**/main/**"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task preSonarQube() {
    def reportName = "jacocoUnitTestReport"

    if (project.gradle.startParameter.taskNames.join(",").contains("jacocoCombinedUnitTestAndroidTestReport")) {
        reportName = "jacocoCombinedUnitTestAndroidTestReport"
    }

    rootProject.ext.set("jacaco_report_name", reportName)
}

tasks['sonarqube'].configure {
    mustRunAfter tasks['preSonarQube']
}
