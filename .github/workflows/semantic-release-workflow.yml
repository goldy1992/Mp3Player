name: Semantic Release Workflow
run-name: Semantic Release
on:
  workflow_dispatch:
  workflow_call:
    secrets:
      SEMANTIC_RELEASE_FINE_GRAINED_TOKEN:
        required: true
      KEY_STORE_BASE64:
        required: true
      KEY_STORE_PASSWORD:
        required: true
      KEY_ALIAS:
        required: true
      KEY_PASSWORD:
        required: true
      RELEASE_SERVICE_ACCOUNT_JSON:
        required: true

jobs:
  semantic-release:
    name: Release
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_FINE_GRAINED_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_FINE_GRAINED_TOKEN }}
    environment: release_env
    outputs:
      performed_release: ${{ steps.release.outputs.performed_release }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install Python dependencies - pyjavaproperties
        run: pip install pyjavaproperties

      - name: Install Node.js dependencies
        run: npm ci

      - name: Release
        id: "release"
        run: npx semantic-release --ci

      - name: Set up JDK 17
        if: ${{ env.performed_release == 'true' }}
        uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: 17

      - name: Cache Gradle packages
        if: ${{ env.performed_release == 'true' }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Base64 Decode Key Store value and write to file named $SIGNING_KEY_FILE
        if: ${{ env.performed_release == 'true' }}
        run: |
          echo "${{ secrets.KEY_STORE_BASE64 }}" >> $SIGNING_KEY_DECODED
          base64 -d $SIGNING_KEY_DECODED > $SIGNING_KEY_PATH
        env:
          SIGNING_KEY_DECODED: signing_key_decoded.txt

      - name: Make $SIGNING_KEY_FILE executable
        if: ${{ env.performed_release == 'true' }}
        run: chmod +x $SIGNING_KEY_PATH

      - name: Build and Sign Release Bundle with Gradle
        if: ${{ env.performed_release == 'true' }}
        run: ./gradlew signFullReleaseBundle --stacktrace -PdisablePreDex -Pfull_release_storePassword=${{ secrets.KEY_STORE_PASSWORD }} -Pfull_release_keyAlias=${{ secrets.KEY_ALIAS }} -P=full_release_keyPassword=${{ secrets.KEY_PASSWORD }} -P=full_release_storeFile=$SIGNING_KEY_FILE_NAME

      - name: Create service_account.json FROM secrets.SERVICE_ACCOUNT_JSON
        if: ${{ env.performed_release == 'true' }}
        run: echo '${{ secrets.RELEASE_SERVICE_ACCOUNT_JSON }}' > service_account.json

      - name: Upload signed AAB to Playstore
        if: ${{ env.performed_release == 'true' }}
        uses: r0adkll/upload-google-play@v1.0.19
        with:
          serviceAccountJson: service_account.json
          packageName: com.github.goldy1992.mp3player.full
          releaseFiles: app/build/outputs/bundle/fullRelease/app-full-release.aab
          track: production
          status: completed
          changesNotSentForReview: false
          inAppUpdatePriority: 2
          whatsNewDirectory: distrib/whatsnew
          mappingFile: app/build/outputs/mapping/fullRelease/mapping.txt
